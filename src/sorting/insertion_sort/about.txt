Insertion sort is a simple sorting algorithm commonly used in computer science and programming.
It works by dividing an array into two parts: a sorted subarray and an unsorted subarray.
The algorithm iterates through the unsorted subarray, taking one element at a time and inserting it into its correct position within the sorted subarray.

public class InsertionSort {
    public static void insertionSort(int[] arr) {
        int n = arr.length;  // Get the length of the array.

        // Start iterating through the array from the second element (index 1).
        for (int i = 1; i < n; i++) {
            int key = arr[i];  // Store the current element to be inserted into the sorted subarray.
            int j = i - 1;  // Initialize a variable for comparing elements in the sorted subarray.

            // Move elements of the sorted subarray that are greater than the key
            // to one position ahead of their current position.
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }

            // Insert the key into its proper position in the sorted subarray.
            arr[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6};  // Create an array of integers to be sorted.
        insertionSort(arr);  // Call the insertionSort function to sort the array.
        System.out.println("Sorted array:");

        // Print the sorted array.
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

Insertion sort is a relatively simple sorting algorithm, and while it may not be as efficient as more advanced sorting
algorithms like quicksort or merge sort, it does have its use cases and can be found in real-world projects and scenarios
where simplicity and small input sizes are more important than sheer sorting speed.
Here are some contexts where insertion sort might be used:
 - Small Data Sets: Insertion sort is efficient for small arrays or lists, making it suitable for cases where the input size is limited.
 - Almost Sorted Data: If the data is already partially sorted or only a few elements are out of place, insertion sort performs well. This can be useful in real-world situations where you expect the data to be nearly sorted.
 - Online Algorithms: In situations where you receive data continuously and need to maintain a sorted list in real-time, insertion sort can be a good choice. It's adaptive and doesn't require the data to be present all at once.
 - Linked Lists: Insertion sort can be used for sorting linked lists as it doesn't require random access to elements, making it suitable for data structures like singly linked lists.
 - Preprocessing: It's sometimes used as a preprocessing step in more complex algorithms, like Timsort, which combines insertion sort with merge sort to efficiently sort data.
 - Education and Demonstration: It's a common sorting algorithm taught in computer science courses because of its simplicity and effectiveness for teaching the basic concept of sorting algorithms.
 - Hybrid Sorting: In hybrid sorting algorithms like IntroSort (used in some C++ standard libraries), insertion sort is employed for small subarrays to avoid the overhead of more complex algorithms.

Keep in mind that for larger data sets, especially when performance is critical, more efficient sorting algorithms like quicksort, mergesort, or heapsort are typically preferred. However, insertion sort's ease of implementation and adaptability make it a valuable tool in specific scenarios where simplicity and the characteristics of the data being sorted align with its strengths.